/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Apl_CuciKendaraan;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Asus
 */
public class Pegawai extends javax.swing.JFrame {

    
    private final int idPegawai;
    private final String namaPegawai;
    private final String aksesPegawai;
    /**
     * Creates new form Pegawai
     */

    public Pegawai(int id, String nama,String akses) {
        initComponents();
        
        this.idPegawai = id;
        this.namaPegawai = nama;
        this.aksesPegawai = akses;
        
        load_table();     // Memuat data pegawai ke tabel saat aplikasi dimulai.
        kosongkan_form(); // Mengosongkan form input.
        isi_combo_box();
    }
    
    private void isi_combo_box() {
        cmbAkses.addItem("Admin");
        cmbAkses.addItem("Pegawai");
    }  
    
    private void kosongkan_form() {
        txtNama.setText("");
        txtUsername.setText("");
        txtPassword.setText("");
        cmbAkses.setSelectedIndex(-1); // Mengatur kembali combo box ke item pertama ("Pilih Akses")
        tblPegawai.clearSelection(); // Menghapus seleksi baris di tabel
    }

    private void load_table() {
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("Nama");
        model.addColumn("Username");
        model.addColumn("Akses"); // Password TIDAK ditampilkan di tabel untuk keamanan

        try {
            String sql = "SELECT id_pegawai, nama_pegawai, username, akses FROM pegawai";
            Connection conn = KoneksiDatabase.configDB();
            Statement stm = conn.createStatement();
            ResultSet res = stm.executeQuery(sql);

            while (res.next()) {
                model.addRow(new Object[]{
                    res.getString("id_pegawai"),
                    res.getString("nama_pegawai"),
                    res.getString("username"),
                    res.getString("akses")
                });
            }
            tblPegawai.setModel(model); // Menggunakan tblPegawai
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Gagal memuat data pegawai: " + e.getMessage());
            e.printStackTrace(); // Penting untuk debugging
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblPegawai = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtNama = new javax.swing.JTextField();
        txtUsername = new javax.swing.JTextField();
        txtPassword = new javax.swing.JTextField();
        cmbAkses = new javax.swing.JComboBox();
        btnSimpan = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblPegawai.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblPegawai.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPegawaiMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblPegawai);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Pegawai");

        jLabel2.setText("Nama :");

        jLabel3.setText("Username :");

        jLabel4.setText("Password :");

        jLabel5.setText("Akses :");

        txtNama.setText("jTextField1");

        txtUsername.setText("jTextField2");

        txtPassword.setText("jTextField3");

        btnSimpan.setText("SIMPAN");
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });

        btnEdit.setText("EDIT");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnHapus.setText("HAPUS");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        jButton1.setText("Kembali");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnHapus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSimpan, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE))
                        .addGap(31, 31, 31))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtUsername, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                                    .addComponent(txtPassword)
                                    .addComponent(txtNama, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(cmbAkses, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(jButton1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(15, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtNama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(cmbAkses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSimpan)
                        .addGap(18, 18, 18)
                        .addComponent(btnEdit)
                        .addGap(18, 18, 18)
                        .addComponent(btnHapus)
                        .addGap(31, 31, 31))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
         int selectedRow = tblPegawai.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih baris yang ingin diedit dari tabel.");
            return;
        }

        String selectedAkses = cmbAkses.getSelectedItem() != null ? cmbAkses.getSelectedItem().toString() : "";

        if (txtNama.getText().isEmpty() || txtUsername.getText().isEmpty() || selectedAkses.equals("Pilih Akses") || selectedAkses.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nama, Username, dan Akses harus diisi!");
            return;
        }

        String idPegawaiToEdit = tblPegawai.getModel().getValueAt(selectedRow, 0).toString();

        try {
            // Aktifkan kembali validasi username duplikat saat edit
            String currentUsernameInTable = tblPegawai.getModel().getValueAt(selectedRow, 2).toString();
            if (!txtUsername.getText().equals(currentUsernameInTable)) { // Jika username di form berubah
                String checkSql = "SELECT COUNT(*) FROM pegawai WHERE username = ?";
                Connection connCheck = KoneksiDatabase.configDB();
                PreparedStatement pstCheck = connCheck.prepareStatement(checkSql);
                pstCheck.setString(1, txtUsername.getText());
                ResultSet rsCheck = pstCheck.executeQuery();
                if (rsCheck.next() && rsCheck.getInt(1) > 0) {
                    JOptionPane.showMessageDialog(this, "Username sudah ada, gunakan username lain.");
                    return;
                }
            }

            String sql = "UPDATE pegawai SET nama_pegawai=?, username=?, akses=? WHERE id_pegawai=?";
            // Jika password juga diubah (field password tidak kosong), tambahkan password ke query UPDATE
            if (!txtPassword.getText().isEmpty()) {
                sql = "UPDATE pegawai SET nama_pegawai=?, username=?, password=?, akses=? WHERE id_pegawai=?";
            }

            Connection conn = KoneksiDatabase.configDB();
            PreparedStatement pst = conn.prepareStatement(sql);

            pst.setString(1, txtNama.getText());
            pst.setString(2, txtUsername.getText());
            if (!txtPassword.getText().isEmpty()) {
                pst.setString(3, txtPassword.getText());
                pst.setString(4, selectedAkses);
                pst.setString(5, idPegawaiToEdit);
            } else {
                pst.setString(3, selectedAkses);
                pst.setString(4, idPegawaiToEdit);
            }

            pst.execute();
            JOptionPane.showMessageDialog(null, "Data pegawai berhasil diupdate");

            load_table();
            kosongkan_form();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Gagal mengupdate data pegawai: " + e.getMessage());
            e.printStackTrace();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
       String selectedAkses = cmbAkses.getSelectedItem() != null ? cmbAkses.getSelectedItem().toString() : "";

        // Validasi input
        if (txtNama.getText().isEmpty() ||
            txtUsername.getText().isEmpty() ||
            txtPassword.getText().isEmpty() ||
            selectedAkses.equals("Pilih Akses") || // Validasi jika item "Pilih Akses" terpilih
            selectedAkses.isEmpty()) { // Validasi jika ComboBox tidak memiliki item terpilih (jarang)
            JOptionPane.showMessageDialog(this, "Semua kolom harus diisi dan akses harus dipilih!");
            return;
        }

        try {
            // Cek apakah username sudah ada
            String checkSql = "SELECT COUNT(*) FROM pegawai WHERE username = ?";
            Connection connCheck = KoneksiDatabase.configDB();
            PreparedStatement pstCheck = connCheck.prepareStatement(checkSql);
            pstCheck.setString(1, txtUsername.getText());
            ResultSet rsCheck = pstCheck.executeQuery();
            if (rsCheck.next() && rsCheck.getInt(1) > 0) {
                JOptionPane.showMessageDialog(this, "Username sudah ada, gunakan username lain.");
                return;
            }

            // SQL INSERT statement (4 kolom, 4 placeholder)
            String sql = "INSERT INTO pegawai (nama_pegawai, username, password, akses) VALUES (?, ?, ?, ?)";
            Connection conn = KoneksiDatabase.configDB();
            PreparedStatement pst = conn.prepareStatement(sql);
            
            pst.setString(1, txtNama.getText());
            pst.setString(2, txtUsername.getText());
            pst.setString(3, txtPassword.getText()); 
            pst.setString(4, cmbAkses.getSelectedItem().toString());

            pst.execute();
            JOptionPane.showMessageDialog(null, "Data berhasil disimpan");

            load_table();
            kosongkan_form();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Gagal menyimpan data: " + e.getMessage());
        }
    

        // TODO add your handling code here:
    }//GEN-LAST:event_btnSimpanActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        int selectedRow = tblPegawai.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih baris yang ingin dihapus dari tabel.");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Yakin ingin menghapus data ini?", "Konfirmasi Hapus", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            String idPegawaiToDelete = tblPegawai.getModel().getValueAt(selectedRow, 0).toString();

            try {
                String sql = "DELETE FROM pegawai WHERE id_pegawai=?";
                Connection conn = KoneksiDatabase.configDB();
                PreparedStatement pst = conn.prepareStatement(sql);

                pst.setString(1, idPegawaiToDelete);

                pst.execute();
                JOptionPane.showMessageDialog(null, "Data pegawai berhasil dihapus");

                load_table();
                kosongkan_form();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Gagal menghapus data pegawai. Pastikan tidak ada data terkait di tabel lain.\n" + e.getMessage());
                e.printStackTrace();
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnHapusActionPerformed

    private void tblPegawaiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPegawaiMouseClicked
        int baris = tblPegawai.rowAtPoint(evt.getPoint());

        if (baris > -1) {
            String id = tblPegawai.getModel().getValueAt(baris, 0).toString();
            String nama = tblPegawai.getModel().getValueAt(baris, 1).toString();
            String username = tblPegawai.getModel().getValueAt(baris, 2).toString();
            String akses = tblPegawai.getModel().getValueAt(baris, 3).toString();

            txtNama.setText(nama);
            txtUsername.setText(username);
            txtPassword.setText(""); // Kosongkan password saat memilih dari tabel untuk keamanan

            // Set pilihan JComboBox berdasarkan data tabel
            // Pastikan item 'akses' yang diambil dari DB ada di dalam JComboBox
            cmbAkses.setSelectedItem(akses);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_tblPegawaiMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new DashboardAdmin(this.idPegawai, this.namaPegawai, this.aksesPegawai).setVisible(true);
        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Pegawai.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Pegawai.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Pegawai.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Pegawai.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Pegawai().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnSimpan;
    private javax.swing.JComboBox cmbAkses;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPegawai;
    private javax.swing.JTextField txtNama;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
